
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> args <- (commandArgs(trailingOnly = TRUE))
> for (i in seq_len(length(args))) {
+     eval(parse(text = args[[i]]))
+ }
> 
> print(genome)
[1] "reference/Drosophila_melanogaster.BDGP5.70.dna.toplevel.fa"
> print(gtf)
[1] "reference/Drosophila_melanogaster.BDGP5.70.protein_coding.gtf"
> print(outdir)
[1] "reference"
> 
> suppressPackageStartupMessages({
+     library(eisaR)
+     library(Biostrings)
+     library(GenomicFeatures)
+     library(BSgenome)
+ })
> 
> bnm <- sub("\\.gtf", "", basename(gtf))
> 
> ## Extract a GRanges object with spliced and unspliced transcripts
> grl <- eisaR::getFeatureRanges(
+     gtf = gtf,
+     featureType = c("spliced", "unspliced"), 
+     verbose = TRUE
+ )
Import genomic features from the file as a GRanges object ... OK
Prepare the 'metadata' data frame ... OK
Make the TxDb object ... OK
'select()' returned 1:1 mapping between keys and columns
Extracting spliced transcript features
Extracting unspliced transcript features
Warning message:
In .get_cds_IDX(mcols0$type, mcols0$phase) :
  The "phase" metadata column contains non-NA values for features of type
  stop_codon. This information was ignored.
> 
> ## Extract spliced and unspliced transcript sequences
> genome <- Biostrings::readDNAStringSet(genome)
> names(genome) <- sapply(strsplit(names(genome), " "), .subset, 1)
> seqs <- GenomicFeatures::extractTranscriptSeqs(
+     x = genome, 
+     transcripts = grl
+ )
> 
> ## Remove duplicated sequences (mostly transcripts without introns), from both 
> ## transcript sequences and GRangesList object
> tx_to_keep <- names(seqs)[which(!duplicated(seqs))]
> grl <- grl[tx_to_keep]
> seqs <- seqs[tx_to_keep]
> 
> ## Additionally remove the few unspliced transcripts where the spliced 
> ## variant has been removed
> (only_unspliced <- paste0(setdiff(gsub("-U", "", names(seqs)), names(seqs)), "-U"))
[1] "FBtr0302280-U" "FBtr0302281-U" "FBtr0300975-U" "FBtr0089800-U"
[5] "FBtr0300093-U" "FBtr0089464-U"
> tx_to_keep <- names(seqs)[!(names(seqs) %in% only_unspliced)]
> grl <- grl[tx_to_keep]
> seqs <- seqs[tx_to_keep]
> 
> stopifnot(all(!duplicated(seqs)))
> 
> ## We don't want to quantify spliced and unspliced sequences as different genes - 
> ## remove the "-U" suffix from the 'unspliced' gene IDs
> ## Use the information in the "corrgene" data frame
> head(metadata(grl)$corrgene, 3)
      spliced     unspliced
1 FBgn0031208 FBgn0031208-U
2 FBgn0067779 FBgn0067779-U
3 FBgn0031213 FBgn0031213-U
> ## Unlist to make the whole thing run faster
> g <- unlist(grl, use.names = FALSE)
> ## First check that relisting gives the same thing as before (minus the metadata)
> tmp <- grl
> metadata(tmp) <- list()
> identical(relist(g, grl), tmp)
[1] TRUE
> ## Then replace the gene IDs and relist
> idx <- which(g$gene_id %in% metadata(grl)$corrgene$unspliced)
> g$gene_id[idx] <- metadata(grl)$corrgene$spliced[match(g$gene_id[idx], metadata(grl)$corrgene$unspliced)]
> grlr <- relist(g, grl)  ## metadata is removed
> 
> stopifnot(all(names(seqs) == names(grlr)))
> 
> ## Export
> df <- eisaR::getTx2Gene(
+     grlr, filepath = file.path(outdir, paste0(bnm, ".expanded.tx2gene.tsv"))
+ )
> Biostrings::writeXStringSet(
+     seqs, filepath = file.path(outdir, paste0(bnm, ".expanded.transcripts.fa"))
+ )
> eisaR::exportToGtf(
+     grlr, filepath = file.path(outdir, paste0(bnm, ".expanded.gtf"))
+ )
> 
> date()
[1] "Mon Jul 18 11:39:49 2022"
> sessionInfo()
R version 4.2.1 (2022-06-23)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /tungstenfs/groups/gbioinfo/Appz/easybuild/software/OpenBLAS/0.3.12-GCC-10.2.0/lib/libopenblas_skylakex-r0.3.12.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats4    stats     graphics  grDevices utils     datasets  methods  
[8] base     

other attached packages:
 [1] BSgenome_1.64.0        rtracklayer_1.56.1     GenomicFeatures_1.48.3
 [4] AnnotationDbi_1.58.0   Biobase_2.56.0         GenomicRanges_1.48.0  
 [7] Biostrings_2.64.0      GenomeInfoDb_1.32.2    XVector_0.36.0        
[10] IRanges_2.30.0         S4Vectors_0.34.0       BiocGenerics_0.42.0   
[13] eisaR_1.8.0           

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.9                  locfit_1.5-9.6             
 [3] lattice_0.20-45             Rsamtools_2.12.0           
 [5] prettyunits_1.1.1           png_0.1-7                  
 [7] assertthat_0.2.1            digest_0.6.29              
 [9] utf8_1.2.2                  BiocFileCache_2.4.0        
[11] R6_2.5.1                    RSQLite_2.2.14             
[13] httr_1.4.3                  pillar_1.7.0               
[15] zlibbioc_1.42.0             rlang_1.0.3                
[17] progress_1.2.2              curl_4.3.2                 
[19] blob_1.2.3                  Matrix_1.4-1               
[21] BiocParallel_1.30.3         stringr_1.4.0              
[23] RCurl_1.98-1.7              bit_4.0.4                  
[25] biomaRt_2.52.0              DelayedArray_0.22.0        
[27] compiler_4.2.1              pkgconfig_2.0.3            
[29] tidyselect_1.1.2            KEGGREST_1.36.2            
[31] SummarizedExperiment_1.26.1 tibble_3.1.7               
[33] GenomeInfoDbData_1.2.8      edgeR_3.38.1               
[35] codetools_0.2-18            matrixStats_0.62.0         
[37] XML_3.99-0.10               fansi_1.0.3                
[39] crayon_1.5.1                dplyr_1.0.9                
[41] dbplyr_2.2.1                GenomicAlignments_1.32.0   
[43] bitops_1.0-7                rappdirs_0.3.3             
[45] grid_4.2.1                  lifecycle_1.0.1            
[47] DBI_1.1.3                   magrittr_2.0.3             
[49] cli_3.3.0                   stringi_1.7.8              
[51] cachem_1.0.6                limma_3.52.2               
[53] xml2_1.3.3                  ellipsis_0.3.2             
[55] filelock_1.0.2              generics_0.1.3             
[57] vctrs_0.4.1                 rjson_0.2.21               
[59] restfulr_0.0.15             tools_4.2.1                
[61] bit64_4.0.5                 glue_1.6.2                 
[63] purrr_0.3.4                 hms_1.1.1                  
[65] MatrixGenerics_1.8.1        parallel_4.2.1             
[67] yaml_2.3.5                  fastmap_1.1.0              
[69] memoise_2.0.1               BiocIO_1.6.0               
> 
> proc.time()
   user  system elapsed 
 33.120   2.660  35.814 
